[크롤러 및 저장 시스템 만들기]
#주식 분석 시스템 구성하기
#파이썬 라이브러리 설치하기
#데이터베이스 스키마와 기초 데이터 생성하기
#파이썬 크롤러 만들기


[MySQL로 주식 분석하기]
#52주 동안의 주가 분석하기
SELECT
  SYMBOL,
  CAST(MIN(CLOSE) AS DECIMAL(18,2)) AS W52_MIN,
  CAST(MAX(CLOSE) AS DECIMAL(18,2)) AS W52_MAX,
  CAST(MAX(CLOSE) - MIN(CLOSE) AS DECIMAL(18,2)) AS 'W52_DIFF_PRICE($)',
  CAST((MAX(CLOSE) - MIN(CLOSE)) / MIN(CLOSE) * 100 AS DECIMAL(18,2)) AS 'W52_DIFF_RATION(%)'
FROM STOCK
WHERE DATE >= DATE_ADD('2023-10-04', INTERVAL - 52 WEEK) AND DATE DATE <= '2023-10-04'
GROUP BY SYMBOL;

#하루 동안의 종목 변화 분석하기
1. 1일간의 시초가와 종가를 비교한 정보 조회
SELECT
  DATE,
  SYMBOL,
  CAST(OPEN AS DECIMAL(18,2)) AS OPEN,
  CAST(CLOSE AS DECIMAL(18,2)) AS CLOSE,
  CAST((OPEN - CLOSE) AS DECIMAL(18,2)) AS 'DIFF_PRICE($)',
  CAST(((CLOSE - OPEN) / OPEN * 100) AS DECIMAL(18,2)) AS 'DIFF_RATION(%)',
  '' AS '---',
  CAST(LOW AS DECIMAL(18,2)) AS LOW,
  CAST(HIGH AS DECIMAL(18,2)) AS HIGH,
  CAST((HIGH - LOW) AS DECIMAL(18,2)) AS 'DIFF_HIGH_PRICE($)',
  CAST((HIGH - LOW) LOW * 100) AS DECIMAL(18,2)) AS 'DIFF_HIGH_RATIO(%)'
FROM STOCK
WHERE DATE = '2023-10-04';

2. 10%이상 가격이 오른 종목 조회
SELECT
  DATE,
  SYMBOL,
  CAST(OPEN AS DECIMAL(18,2)) AS OPEN,
  CAST(CLOSE AS DECIMAL(18,2)) AS CLOSE,
  CAST((OPEN - CLOSE) AS DECIMAL(18,2)) AS 'DIFF_PRICE($)',
  CAST(((CLOSE - OPEN) / OPEN * 100) AS DECIMAL(18,2)) AS 'DIFF_RATIO(%)',
  '' AS '---',
  CAST(LOW AS DECIMAL(18,2)) AS LOW,
  CAST(HIGH AS DECIMAL(18,2)) AS HIGH,
  CAST((HIGH = LOW) AS DECIMAL(18,2)) AS 'DIFF_HIGH_PRICE($)',
  CAST(((HIGH - LOW) / LOW * 100) AS DECIMAL(18,2)) AS 'DIFF_HIGH_RATIO(%)'
FROM STOCK
WHERE DATE = '2022-02-24'
  AND CAST(((CLOSE - OPEN) / OPEN * 100) AS DECIMAL(18,2)) >= 10
ORDER BY CAST(((CLOSE - OPEN) / OPEN * 100) AS DECIMAL(18,2)) DESC;

[전일 대비 종목의 변화 분석하기]
SELECT
  A.SYMBOL,
  A.DATE AS A_DATE,
  CAST(A.CLOSE AS DECIMAL(18,2)) AS A_CLOSE,
  '' AS '---',
  B.DATE AS B_DATE,
  CAST(B.CLOSE AS CEDIMAL(18,2)) AS B_CLOSE,
  '' AS '---',
  CAST((B.CLOSE - A.CLOSE) AS DECIMAL(18,2)) AS 'DIFF_PRICE($)',
  CAST(((B.CLOSE - A.CLOSE) / B.CLOSE * 100) AS DECIMAL(18,2)) AS 'DIFF_RATIO(%)'
FROM STOCK AS A
  INNER JOIN STOCK AS B ON A.SYMBOL = B.SYMBOL AND A.DATE = DATE_ADD(B.DATE, INTERVAL -1 DAY)
WHERE A.DATE = '2023-10-04';

[주가가 연속 상승한 종목 분석하기]
1. 특정 기간 동안 종목별 등락을 저장하는 테이블 생성
CREATE TEMPORARY TABLE TEMP1
SELECT
  A.SYMBOL,
  A.CLOSE AS A_CLOSE,
  B.CLOSE AS B_CLOSE,
  B.CLOSE - A.CLOSE AS CLOSE_DIFF,
  (B.CLOSE - A.CLOSE) / A.CLOSE * 100 AS RATIO_DIFF
FROM (SELECT SYMBOL, CLOSE FROM STOCK WHERE DATE = '2021-02-17') AS A
  INNER JOIN (SELECT SYMBOL, CLOSE FROM STOCK WHERE DATE = '2021-02-24') AS B
  ON A.SYMBOL = B.SYMBOL;

SELECT * FROM TEMP1;

2. 10% 상승한 종목들의 정보를 저장하는 테이블 생성
CREATE TEMPLORARY TABLE TEMP2
SELECT
  ROW_NUMBER() OVER (PARTITION BY A.SYMBOL ORDER BY DATE DESC) AS NUM,
  A.SYMBOL,
  B.DATE,
  B.CLOSE
FROM TEMP1 AS A
  INNER JOIN STOCK AS B ON A.SYMBOL = B.SYMBOL
WHERE A.RATIO_DIFF >= 10
  AND B.DATE >= '2021-02-17'
  AND B.DATE <= '2021-02-24';

CREATE TEMPORARY TABLE TEMP2_1
SELECT
  ROW_NUMBER() OVER (PARTITION BY A.SYMBOL ORDER BY DATE ASC) AS NUM,
  A.SYMBOL,
  B.DATE,
  B.CLOSE
FROM TEMP1 AS A
  INNER JOIN STOCK AS B ON A.SYMBOL = B.SYMBOL
WHERE A.RATIO_DIFF >= 10
  AND B.DATE >= '2021-02-17'
  AND B.DATE <= '2021-02-24';

SELECT * FROM TEMP2;

3. SYMBOL 열을 기준으로 전일 데이터 전일 대비 상승한 종목 데이터를 저장하는 테이블 생성
