✅ 1. 크롤러 및 저장 시스템 만들기
1.1 주식 분석 시스템 구성
목표: 주가 데이터를 수집하고 MySQL에 저장하여 분석 가능하도록 시스템 구성

1.2 파이썬 라이브러리 설치
예: pymysql, requests, beautifulsoup4, yfinance, schedule 등

1.3 데이터베이스 스키마와 기초 데이터 생성
STOCK 테이블 생성
주요 칼럼: DATE, SYMBOL, OPEN, CLOSE, HIGH, LOW, VOLUME
NASDAQ_COMPANY 테이블 생성
주요 칼럼: SYMBOL, COMPANY_NAME, INDUSTRY

1.4 파이썬 크롤러 만들기
Yahoo Finance, KRX 등에서 데이터 수집
수집 데이터를 MySQL에 주기적으로 저장 (예: 하루 1회)

✅ 2. MySQL로 주식 분석하기
2.1 52주 주가 분석
-- 52주 저가, 고가, 차이, 상승률 계산
SELECT
  SYMBOL,
  CAST(MIN(CLOSE) AS DECIMAL(18,2)) AS W52_MIN,
  CAST(MAX(CLOSE) AS DECIMAL(18,2)) AS W52_MAX,
  CAST(MAX(CLOSE) - MIN(CLOSE) AS DECIMAL(18,2)) AS 'W52_DIFF_PRICE($)',
  CAST((MAX(CLOSE) - MIN(CLOSE)) / MIN(CLOSE) * 100 AS DECIMAL(18,2)) AS 'W52_DIFF_RATIO(%)'
FROM STOCK
WHERE DATE BETWEEN DATE_ADD('2023-10-04', INTERVAL -52 WEEK) AND '2023-10-04'
GROUP BY SYMBOL;

2.2 하루 동안의 종목 변화 분석
(1) 특정 날짜 기준 시초가-종가 비교
SELECT
  DATE, SYMBOL,
  CAST(OPEN AS DECIMAL(18,2)) AS OPEN,
  CAST(CLOSE AS DECIMAL(18,2)) AS CLOSE,
  CAST(OPEN - CLOSE AS DECIMAL(18,2)) AS 'DIFF_PRICE($)',
  CAST((CLOSE - OPEN) / OPEN * 100 AS DECIMAL(18,2)) AS 'DIFF_RATIO(%)',
  '' AS '---',
  CAST(LOW AS DECIMAL(18,2)) AS LOW,
  CAST(HIGH AS DECIMAL(18,2)) AS HIGH,
  CAST(HIGH - LOW AS DECIMAL(18,2)) AS 'DIFF_HIGH_PRICE($)',
  CAST((HIGH - LOW) / LOW * 100 AS DECIMAL(18,2)) AS 'DIFF_HIGH_RATIO(%)'
FROM STOCK
WHERE DATE = '2023-10-04';

(2) 10% 이상 상승한 종목 조회
SELECT
  DATE, SYMBOL, OPEN, CLOSE,
  CAST((CLOSE - OPEN) / OPEN * 100 AS DECIMAL(18,2)) AS 'DIFF_RATIO(%)'
FROM STOCK
WHERE DATE = '2022-02-24'
  AND ((CLOSE - OPEN) / OPEN * 100) >= 10
ORDER BY 'DIFF_RATIO(%)' DESC;

2.3 전일 대비 종목 변화 분석
SELECT
  A.SYMBOL, A.DATE AS A_DATE, A.CLOSE AS A_CLOSE,
  B.DATE AS B_DATE, B.CLOSE AS B_CLOSE,
  B.CLOSE - A.CLOSE AS 'DIFF_PRICE($)',
  ((B.CLOSE - A.CLOSE) / B.CLOSE * 100) AS 'DIFF_RATIO(%)'
FROM STOCK A
JOIN STOCK B ON A.SYMBOL = B.SYMBOL AND A.DATE = DATE_ADD(B.DATE, INTERVAL -1 DAY)
WHERE A.DATE = '2023-10-04';

✅ 3. 주가 연속 상승 종목 분석
3.1 특정 기간 전후의 등락 비교
CREATE TEMPORARY TABLE TEMP1 AS
SELECT
  A.SYMBOL, A.CLOSE AS A_CLOSE,
  B.CLOSE AS B_CLOSE,
  B.CLOSE - A.CLOSE AS CLOSE_DIFF,
  (B.CLOSE - A.CLOSE) / A.CLOSE * 100 AS RATIO_DIFF
FROM
  (SELECT SYMBOL, CLOSE FROM STOCK WHERE DATE = '2021-02-17') A
JOIN
  (SELECT SYMBOL, CLOSE FROM STOCK WHERE DATE = '2021-02-24') B
ON A.SYMBOL = B.SYMBOL;

3.2 10% 이상 상승 종목들의 기간별 주가 저장
-- 최신 날짜 순
CREATE TEMPORARY TABLE TEMP2 AS
SELECT ROW_NUMBER() OVER (PARTITION BY A.SYMBOL ORDER BY DATE DESC) AS NUM,
       A.SYMBOL, B.DATE, B.CLOSE
FROM TEMP1 A
JOIN STOCK B ON A.SYMBOL = B.SYMBOL
WHERE A.RATIO_DIFF >= 10
  AND B.DATE BETWEEN '2021-02-17' AND '2021-02-24';

-- 날짜 오름차순 순서
CREATE TEMPORARY TABLE TEMP2_1 AS
SELECT ROW_NUMBER() OVER (PARTITION BY A.SYMBOL ORDER BY DATE ASC) AS NUM,
       A.SYMBOL, B.DATE, B.CLOSE
FROM TEMP1 A
JOIN STOCK B ON A.SYMBOL = B.SYMBOL
WHERE A.RATIO_DIFF >= 10
  AND B.DATE BETWEEN '2021-02-17' AND '2021-02-24';

3.3 전일 대비 상승 정보 저장
CREATE TEMPORARY TABLE TEMP3 AS
SELECT
  B.SYMBOL,
  A.DATE AS A_DATE, A.CLOSE AS A_CLOSE,
  B.DATE AS B_DATE, B.CLOSE AS B_CLOSE,
  B.CLOSE - A.CLOSE AS CLOSE_DIFF,
  (B.CLOSE - A.CLOSE) / A.CLOSE * 100 AS RATIO_DIFF
FROM TEMP2 A
JOIN TEMP2_1 B ON A.SYMBOL = B.SYMBOL AND A.NUM = B.NUM - 1;

3.4 하락 없는 종목 필터링
-- 하락한 적 있는 종목 추출
CREATE TEMPORARY TABLE TEMP3_1 AS
SELECT SYMBOL FROM TEMP3 WHERE RATIO_DIFF < 0 GROUP BY SYMBOL;

-- 연속 상승 종목만 추출
CREATE TEMPORARY TABLE TEMP4 AS
SELECT SYMBOL, A_DATE, ROUND(A_CLOSE, 2),
       B_DATE, ROUND(B_CLOSE, 2),
       ROUND(CLOSE_DIFF, 2), ROUND(RATIO_DIFF, 2)
FROM TEMP3
WHERE SYMBOL NOT IN (SELECT SYMBOL FROM TEMP3_1);

3.5 회사 정보와 최종 결과 조인
SELECT
  A.SYMBOL, D.COMPANY_NAME, D.INDUSTRY,
  ROUND(A.A_CLOSE, 2), ROUND(A.B_CLOSE, 2),
  ROUND(A.CLOSE_DIFF, 2), ROUND(A.RATIO_DIFF, 2)
FROM TEMP1 A
JOIN (SELECT SYMBOL FROM TEMP2 GROUP BY SYMBOL) B ON A.SYMBOL = B.SYMBOL
JOIN (SELECT SYMBOL FROM TEMP4 GROUP BY SYMBOL) C ON A.SYMBOL = C.SYMBOL
JOIN NASDAQ_COMPANY D ON A.SYMBOL = D.SYMBOL
ORDER BY RATIO_DIFF DESC;

3.6 임시 테이블 삭제
DROP TEMPORARY TABLE TEMP1;
DROP TEMPORARY TABLE TEMP2;
DROP TEMPORARY TABLE TEMP2_1;
DROP TEMPORARY TABLE TEMP3;
DROP TEMPORARY TABLE TEMP3_1;
DROP TEMPORARY TABLE TEMP4;
