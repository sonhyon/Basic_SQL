#내부 조인
SELECT #애부 조인한 테이블에서 조건에 맞는 데이터 조회
A.FIRST_NAME, A.ADDRESS_ID,  
B.ADDRESS_ID, B.ADDRESS 
FROM CUSTOMER AS A
INNER JOIN ADDRESS AS B
ON A.ADDRESS_ID = B.ADDRESS_ID
WHERE A.FIRST_NAME = 'ROSA';

SELECT #2개의 조인 조건으로 조인한 테이블에서 조건에 맞는 데이터 조회
A.CUSTOMER_ID, A.FIRST_NAME,
B.ADDRESS_ID, B.ADDRESS
FROM CSUTOMER AS A
INNER JOIN ADDRESS AS B
ON A.ADDRESS_ID = B.ADDRESS_ID
AND A.CREATE_DATE = B.LAST_UPDATE
WHERE A.FIRST_NAME = 'ROSA';

SELECT #3개의 테이블을 조인한 테이블에서 조건에 맞는 데이터 조회
A.CUSTOMER_ID, A.FIRST_NAME,
B.ADDRESS_ID, B.ADDRESS,
C.CITY_ID, C.CITY
FROM CUSTOMER AS A
INNER JOIN ADDRESS AS B ON A.ADDRESS_ID = B.ADDRESS_ID
INNER JOIN CITY AS C ON B.CITY_ID = C.CITY_ID
WHERE A.FIRST_NAME = 'ROSA';

#외부 조인
#LEFT OUTER JOIN
SELECT 
A.ADDRESS, A.ADDRESS_ID,
B.ADDRESS_ID, B.STORE_ID
FROM ADDRESS AS A
 LEFT OUTER JOIN STORE AS B ON A.ADDRESS_ID = B.ADDRESS_ID;

#RIGHT OUTER JOIN
SELECT  
A.ADDRESS, A.ADDRESS_ID A_ADDRESS_ID,
B.ADDRESS AS B_ADDRESS_ID, B.STORE_ID
FROM ADDRESS AS A
 RIGHT OUTER JOIN STORE AS B ON A.ADDRESS_ID = B.ADDRESS_ID;

#FULL OUTER JOIN
SELECT 
A.ADDRESS_ID AS A_ADDRESS_ID, A.STORE_ID,
B.ADDRESS, B.ADDRESS_ID AS B_ADDRESS_ID
FROM STORE AS A
 LEFT OUTER JOIN ADDRESS AS B ON A.ADDRESS_ID = B.ADDRESS_ID
UNION
SELECT
A.ADDRESS_ID AS A_ADDRESS_ID, A.STORE_ID,
B.ADDRESS, B.ADDRESS_ID AS B_ADDRESS_ID
FROM STORE AS A
 RIGHT OUTER JOIN ADDRESS AS B ON A.ADDRESS_ID = B.ADDRESS_ID;

#CROSS JOIN
SELECT 
A.NUM, B.NAME
FROM DOIT_CROSS1 AS A
  CROSS JOIN DOIT_CROSS2 AS B
ORDER BY A.NUM;

#SELF JOIN
SELECT A.CUSTOMER_ID AS A_CUSTOMER_ID, B.CUSTOMER_ID AS B_CUSTOMER_ID
FROM CUSTOMER AS A
  INNER JOIN CUSTOMER AS B ON A.CUSTOMER_ID = B.CUSTOMER_ID;

SELECT #SELF JOIN문을 적용한 쿼리
  A.PAYMENT_ID, A.AMOUNT, B.AMOUNT, B.AMOUNT-A,AMOUNT AS PROF-IT_AMOUNT
FROM PAYMENT AS A
  LEFT OUTER JOIN PAYMENT AS B ON A.PAYMENT_ID = B.PAYMENT_ID-1;

#서브 쿼리
#단일 행 서브 쿼리
SELECT * FROM CUSTOMER 
WHERE CUSTOMER_ID = (SELECT CUSTOMER_ID FROM CUSTOMER WHERE FIRST_NAME='ROSA'); 

#IN을 활용한 다중 행 서비 쿼리
SELECT * FROM CUSTOMER
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID FROM CUSTOMER WHERE FIRST_NAME IN ('ROSA', 'ANA')); 

SELECT FILM_ID, TITLE
FROM FILM
WHERE FILM_ID IN (SELECT A.FILM_ID FROM FILM_CATEGORY AS A
                  INNER JOING CATEGORY AS B ON A.CATEGROY_ID = B.CATEGORY_ID
                  WHERE B.NAME = 'ACTION');

#NOT IN을 활용한 서브 쿼리
SELECT FILM_ID, TITLE FROM FILM
WHERE FILM_ID NOT IN (SELECT A.FILM_ID FROM FILM_CATEGORY AS A
                      INNER JOIN CATEGORY AS B ON A.CATEGORY_ID = B.CATEGORY_ID
                      WHERE B.NAME = 'ACTION');

#ANY를 활용한 서브 쿼리
SELECT * FROM CUSTOMER #원래는 단일행 구조라 안되지만 ANY가 있어 작동 가능하다
WHERE CUSTOMER_ID = ANY (SELECT CUSTOMER_ID FROM CUSTOMER 
                         WHERE FIRST_NAME IN ('ROSA', 'ANA'));

#<ANY를 활용한 서브 쿼리 적용
SELECT * FROM CUSTOMER
WHERE CUSTOMER_ID <ANY (SELECT CUSTOMER_ID FROM CUSTOMER
                        WHERE FIRST_NAME IN ('ROSA', 'ANA'));

#>ANY를 활용한 서브 쿼리 적용
SELECT * FROM CUSTOMER
WHERE CUSTOMER_ID >ANY (SELECT CUSTOMER_ID FROM CUSTOMER
                        WHERE FIRST_NAME IN ('ROSA', 'ANA'));

#EXISTS를 활용한 서브 쿼리 (존재하는지)
SELECT * FROM CUSTOMER
WHERE EXISTS (SELECT CUSTOMER_ID FROM CUSTOMER
              WHERE FIRST_NAME IN ('ROSA', 'ANA'));

#NOT EXISTS를 활용한 서브 쿼리 (존재 안하는지)
SELECT * FROM CUSTOMER
WHERE NOT EXISTS (SELECT CUSTOMER_ID FROM CUSTOMER
                  WHERE FIRST_NAME IN ('KANG'));

#ALL를 활용한 서브 쿼리
SELECT * FROM CUSTOMER
WHERE ALL (SELECT CUSTOMER_ID FROM CUSTOMER
              WHERE FIRST_NAME IN ('ROSA', 'ANA'));

#FROM 문에 서브 쿼리 사용하기
SELECT A.FILM, A.TITLE, A.SPECIAL_FEATURES, X.NAME
FROM FILM AS A
 INNER JOIN (SELECT B.FILM_ID, C.NAME
             FROM FILM_CATEGORY AS B
              INNER JOIN CATEGROY AS C ON B.CATEGORY_ID = C.CATEGORY_ID
             WHERE B.FILM_ID > 10 AND B.FILM_ID < 20) AS X ON A.FILM_ID = X.FILM_ID;

#SELECT 문에 서브 쿼리 사용하기
SELECT A.FILM_ID, (SELECT C.NAME 
                   FROM FILM_CATEGORY AS B
                    INNER JOIN CATEGORY AS C ON B.CATEGORY_ID = C.CATEGORY_ID
                   WHERE A.FILM_ID = B.FILM_ID) AS NAME
FROM FILM AS A
WHERE A.FILM_ID > 10 AND A.FILM_ID < 20;

#[공통 테이블 표현식]
#일반 CTE : 임시 결과셋을 만들어서 메인 쿼리에서 재사용할 수 있게 해주는 문법
WITH avg_score AS (
  SELECT AVG(score) AS avg FROM students
)
SELECT name, score
FROM students, avg_score
WHERE students.score > avg_score.avg;

#UNION 문으로 CTE 결합해 보기
WITH CTE_CUSTOMER (CUSTOMER_ID, FIRST_NAME, EMAIL)
AS
(
 SELECT CUSTOMER_ID, FIRST_NAME, EMAIL FROM CUSTOMER WHREE CUSTOMER_ID >= 10
 AND CUSTOMER_ID <= 15
 UNION ALL
 SELECT CUSTOMER_ID, FIRST_NAME, EMAIL FROM CUSTOMER WHERE CUSTOMER_ID >= 25
 AND CUSTOMER_ID <= 30
)
SELECT * FROM CTE_CUSTOMER;

#INTERSECT 문으로 CTE 결합
WITH CTE_CUSTOMER_ID, FFIRST_NAME, EMAIL)
AS
(
 SELECT CUSTOMER_ID, FIRST_NAME, EMIL FROM CUSTOMER_ID >= 10
 AND CUSTOMER_ID <= 15
 INTERSECT
 SELECT CUSTOMER_ID, FIRST_NAME, EMAIL FROM CUSTOMER_ID >= 12
 AND CUSTOMER_ID <= 12
)
SELECT * FROM CTE_CUSTOMER;
