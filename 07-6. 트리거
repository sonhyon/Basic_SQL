📌 트리거 (Trigger)
✅ 트리거란?
**테이블의 데이터 변경 이벤트(INSERT, UPDATE, DELETE)**가 발생할 때 자동으로 실행되는 SQL 블록
별도로 실행하지 않아도 이벤트가 발생하면 자동으로 동작함

🔎 트리거의 종류
1. 실행 시기 기준
BEFORE 트리거: 이벤트가 발생하기 전에 실행
AFTER 트리거: 이벤트가 발생한 후에 실행

2. 대상 기준
MySQL은 **행 트리거(row-level)**만 지원
(※ 오라클 등은 **문장 트리거(statement-level)**도 있음)

🛠️ 트리거 실습 예제
1️⃣ 테이블 생성
USE DOITSQL;

CREATE TABLE TBL_TRIGGER_1 (
  COL_1 INT,
  COL_2 VARCHAR(50)
);

CREATE TABLE TBL_TRIGGER_2 (
  COL_1 INT,
  COL_2 VARCHAR(50)
);

-- 테스트용 데이터 삽입
INSERT INTO TBL_TRIGGER_1 VALUES (1, '데이터 1 입력');

2️⃣ 트리거 생성 (AFTER UPDATE 시 동작)
DELIMITER $$

CREATE TRIGGER DOT_UPDATE_TRIGGER
AFTER UPDATE
ON TBL_TRIGGER_1
FOR EACH ROW
BEGIN
  INSERT INTO TBL_TRIGGER_2 VALUES (OLD.COL_1, OLD.COL_2);
END $$

DELIMITER ;

3️⃣ 트리거 작동시키기
-- 안전 모드 해제 (일부 환경에서 UPDATE 제한이 걸릴 수 있음)
SET SQL_SAFE_UPDATES = 0;

-- 트리거 실행 조건: TBL_TRIGGER_1에 UPDATE 발생
UPDATE TBL_TRIGGER_1
SET COL_1 = 2, COL_2 = '1을 2로 수정';

-- 결과 확인
SELECT * FROM TBL_TRIGGER_1;  -- 수정된 데이터 확인
SELECT * FROM TBL_TRIGGER_2;  -- 트리거로 저장된 이전 값 확인

✅ 트리거에서 사용 가능한 키워드
| 키워드 | 설명                             |
| ----- | -------------------------------- |
| `OLD` | 변경 이전의 데이터 (UPDATE, DELETE에서 사용) |
| `NEW` | 새로 입력된 데이터 (INSERT, UPDATE에서 사용) |
