1. 조건 조회 (WHERE 문)
비교연산자: <, <=, =, >, >=, <>, !=, !<, !>
논리연산자: ALL, AND, ANY, BETWEEN, EXISTS, IN, LIKE, NOT, OR, SOME

2. NULL 및 공백 조회
SELECT * FROM ADDRESS WHERE ADDRESS2 IS NULL;        -- NULL 값
SELECT * FROM ADDRESS WHERE ADDRESS2 IS NOT NULL;    -- NOT NULL
SELECT * FROM ADDRESS WHERE ADDRESS2 = '';           -- 공백 문자열

3. 정렬 (ORDER BY)
-- 정렬 후 상위 10개 출력
SELECT * FROM CUSTOMER ORDER BY STORE_ID DESC, FIRST_NAME ASC LIMIT 10;
-- 101번째부터 10개
SELECT * FROM CUSTOMER ORDER BY STORE_ID DESC, FIRST_NAME ASC LIMIT 100, 10;
-- OFFSET 사용 (위와 동일한 결과)
SELECT * FROM CUSTOMER ORDER BY STORE_ID DESC, FIRST_NAME ASC LIMIT 10 OFFSET 100;

4. 문자열 조회
LIKE: %, _, ESCAPE
REGEXP: 정규표현식 사용 가능

-- K로 시작 or N으로 끝나는 이름
SELECT * FROM CUSTOMER WHERE FIRST_NAME REGEXP '^K|N$';
-- K 다음에 L~N 범위의 문자가 오는 이름
SELECT * FROM CUSTOMER WHERE FIRST_NAME REGEXP 'K[L-N]';
-- K 다음에 L~N이 아닌 문자
SELECT * FROM CUSTOMER WHERE FIRST_NAME REGEXP 'K[^L-N]';

5. 데이터 그룹화 (GROUP BY)
-- 단일 그룹화
SELECT SPECIAL_FEATURES, COUNT(*) AS CNT FROM FILM GROUP BY SPECIAL_FEATURES;
-- 다중 그룹화 및 정렬
SELECT SPECIAL_FEATURES, RATING, COUNT(*) AS CNT 
FROM FILM 
GROUP BY SPECIAL_FEATURES, RATING
ORDER BY CNT DESC;
⚠️ SELECT에 사용하는 컬럼과 GROUP BY의 컬럼이 일치해야 함

6. HAVING (그룹화된 결과 필터링)
SELECT SPECIAL_FEATURES, RATING 
FROM FILM 
GROUP BY SPECIAL_FEATURES, RATING 
HAVING RATING = 'G';

7. 중복 제거 (DISTINCT)
SELECT DISTINCT SPECIAL_FEATURES, RATING FROM FILM;

8. 데이터베이스 및 테이블 생성
CREATE DATABASE 데이터베이스명;
USE 데이터베이스명;

9. AUTO_INCREMENT
CREATE TABLE DOIT_INCREMENT (
  COL_1 INT AUTO_INCREMENT PRIMARY KEY,
  COL_2 VARCHAR(50),
  COL_3 INT
);

-- 값 삽입
INSERT INTO DOIT_INCREMENT (COL_2, COL_3) VALUES ('1 자동입력', 1);

-- 마지막 삽입 ID 조회
SELECT LAST_INSERT_ID();

-- 시작값, 증가값 설정
ALTER TABLE DOIT_INCREMENT AUTO_INCREMENT = 100;
SET @@AUTO_INCREMENT_INCREMENT = 5;

10. 조회 결과를 다른 테이블에 저장
-- 기존 테이블에 삽입
INSERT INTO DOIT_INSERT_SELECT_TO 
SELECT * FROM DOIT_INSERT_SELECT_FROM;

-- 새 테이블 생성 후 삽입
CREATE TABLE DOIT_SELECT_NEW AS 
SELECT * FROM DOIT_INSERT_SELECT_FROM;

11. 외래키 사용 및 제약조건
CREATE TABLE DOIT_PARENT (COL_1 INT PRIMARY KEY);

CREATE TABLE DOIT_CHILD (COL_1 INT);
ALTER TABLE DOIT_CHILD 
ADD FOREIGN KEY (COL_1) REFERENCES DOIT_PARENT(COL_1);

-- 외래키 제약 조건 제거
ALTER TABLE DOIT_CHILD 
DROP FOREIGN KEY DOIT_CHILD_IBFK_1;

-- 외래키 비활성화/활성화
SET FOREIGN_KEY_CHECKS = 0;
SET FOREIGN_KEY_CHECKS = 1;

12. 데이터 타입
정수형: TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT
실수형: FLOAT, DOUBLE
문자형: CHAR(n), VARCHAR(n), BINARY(n), VARBINARY(n)
날짜/시간형: TIME, DATE, DATETIME, TIMESTAMP
