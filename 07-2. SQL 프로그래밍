‚úÖ IF Î¨∏
üìå Îã®Ïàú IF Î¨∏ ÏÇ¨Ïö© Ïòà
SELECT STORE_ID, IF(STORE_ID = 1, 'Ïùº', 'Ïù¥') AS ONE_TWO
FROM CUSTOMER 
GROUP BY STORE_ID;

üìå IF Î¨∏ÏùÑ Ìè¨Ìï®Ìïú Ïä§ÌÜ†Ïñ¥Îìú ÌîÑÎ°úÏãúÏ†Ä
DROP PROCEDURE IF EXISTS DOIT_IF;
DELIMITER $$
CREATE PROCEDURE DOIT_IF (CUSTOMER_ID_INPUT INT)
BEGIN
  DECLARE STORE_ID_I INT;
  DECLARE S_ID_ONE INT DEFAULT NULL;
  DECLARE S_ID_TWO INT DEFAULT NULL;

  SET STORE_ID_I = (SELECT STORE_ID FROM CUSTOMER WHERE CUSTOMER_ID = CUSTOMER_ID_INPUT);

  IF STORE_ID_I = 1 THEN 
    SET S_ID_ONE = 1;
  ELSE 
    SET S_ID_TWO = 2;
  END IF;

  SELECT STORE_ID_I, S_ID_ONE, S_ID_TWO;
END $$
DELIMITER ;

-- Ïã§Ìñâ
CALL DOIT_IF(1);

‚úÖ CASE Î¨∏
üìå SELECTÏóêÏÑú CASE ÏÇ¨Ïö©
SELECT CUSTOMER_ID, SUM(AMOUNT) AS AMOUNT,
  CASE
    WHEN SUM(AMOUNT) >= 150 THEN 'VVIP'
    WHEN SUM(AMOUNT) >= 120 THEN 'VIP'
    WHEN SUM(AMOUNT) >= 100 THEN 'GOLD'
    WHEN SUM(AMOUNT) >= 80 THEN 'SILVER'
    ELSE 'BRONZE'
  END AS CUSTOMER_LEVEL
FROM PAYMENT 
GROUP BY CUSTOMER_ID;

üìå CASE Î¨∏ÏùÑ Ìè¨Ìï®Ìïú Ïä§ÌÜ†Ïñ¥Îìú ÌîÑÎ°úÏãúÏ†Ä
DROP PROCEDURE IF EXISTS DOIT_CASE;
DELIMITER $$
CREATE PROCEDURE DOIT_CASE (CUSTOMER_ID_INPUT INT)
BEGIN
  DECLARE CUSTOMER_LEVEL VARCHAR(10);
  DECLARE AMOUNT_SUM FLOAT;

  SELECT SUM(AMOUNT) INTO AMOUNT_SUM 
  FROM PAYMENT 
  WHERE CUSTOMER_ID = CUSTOMER_ID_INPUT;

  IF AMOUNT_SUM >= 150 THEN 
    SET CUSTOMER_LEVEL = 'VVIP';
  ELSEIF AMOUNT_SUM >= 120 THEN 
    SET CUSTOMER_LEVEL = 'VIP';
  ELSEIF AMOUNT_SUM >= 100 THEN 
    SET CUSTOMER_LEVEL = 'GOLD';
  ELSEIF AMOUNT_SUM >= 80 THEN 
    SET CUSTOMER_LEVEL = 'SILVER';
  ELSE 
    SET CUSTOMER_LEVEL = 'BRONZE';
  END IF;

  SELECT CUSTOMER_ID_INPUT AS CUSTOMER_ID, AMOUNT_SUM, CUSTOMER_LEVEL;
END $$
DELIMITER ;

-- Ïã§Ìñâ
CALL DOIT_CASE(4);

‚úÖ WHILE Î¨∏
üìå Í∏∞Î≥∏ WHILE Î£®ÌîÑ
DROP PROCEDURE IF EXISTS DOIT_WHILE;
DELIMITER $$
CREATE PROCEDURE DOIT_WHILE (PARAM_1 INT, PARAM_2 INT)
BEGIN
  DECLARE I INT DEFAULT 1;
  DECLARE WHILE_SUM INT DEFAULT 0;

  WHILE (I <= PARAM_1) DO
    SET WHILE_SUM = WHILE_SUM + PARAM_2;
    SET I = I + 1;
  END WHILE;

  SELECT WHILE_SUM;
END $$
DELIMITER ;

-- Ïã§Ìñâ
CALL DOIT_WHILE(10, 3);

üìå WHILE + LEAVE Î¨∏
DROP PROCEDURE IF EXISTS DOIT_WHILE;
DELIMITER $$
CREATE PROCEDURE DOIT_WHILE (PARAM_1 INT, PARAM_2 INT)
BEGIN
  DECLARE I INT DEFAULT 1;
  DECLARE WHILE_SUM INT DEFAULT 0;

  mywhile: WHILE (I <= PARAM_1) DO
    SET WHILE_SUM = WHILE_SUM + PARAM_2;
    SET I = I + 1;

    IF WHILE_SUM > 100 THEN 
      LEAVE mywhile;
    END IF;
  END WHILE;

  SELECT WHILE_SUM;
END $$
DELIMITER ;

-- Ïã§Ìñâ
CALL DOIT_WHILE(1000, 3);

‚úÖ ÎèôÏ†Å SQL
üìå PREPARE ÏÇ¨Ïö©
PREPARE DYNAMIC_QUERY FROM 'SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = ?';
SET @A = 1;
EXECUTE DYNAMIC_QUERY USING @A;
DEALLOCATE PREPARE DYNAMIC_QUERY;

üìå ÎèôÏ†Å SQLÏùÑ ÌôúÏö©Ìïú ÌîÑÎ°úÏãúÏ†Ä
DROP PROCEDURE IF EXISTS DOIT_DYNAMIC;
DELIMITER $$
CREATE PROCEDURE DOIT_DYNAMIC (T_NAME VARCHAR(50), C_NAME VARCHAR(50), CUSTOMER_ID INT)
BEGIN
  SET @T_NAME = T_NAME;
  SET @C_NAME = C_NAME;
  SET @CUSTOMER_ID = CUSTOMER_ID;

  SET @SQL = CONCAT('SELECT ', @C_NAME, ' FROM ', @T_NAME, ' WHERE CUSTOMER_ID = ', @CUSTOMER_ID);
  PREPARE DYNAMIC_QUERY FROM @SQL;
  EXECUTE DYNAMIC_QUERY;
  DEALLOCATE PREPARE DYNAMIC_QUERY;
END $$
DELIMITER ;

-- Ïã§Ìñâ
CALL DOIT_DYNAMIC('PAYMENT', '*', 1);

