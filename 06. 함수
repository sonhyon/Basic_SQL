#문자열과 문자열을 연결하는 함수 - CONCAT
SELECT CONCAT(FIRST_NAME, ', ', LAST_NAME) AS CUSTOMER_NAME FROM CUSTOMER;
SELECT CONCAT_WS(', ', FIRST_NAME, LAST_NAME, EMAIL) AS CUSTOMER_NAME FROM CUSTOMER; #구분자를 미리 정의해서 자동으로 적용
SELECT CONCAT(NULL, FIRST_NAME, LAST_NAME) AS CUSTOMER_NAME FROM CUSTOMER; #인수로 NULL을 입력할 경우 결과는 모두 NULL을 반환한다
SELECT CONCAT_WS(', ', FIRST_NAME, NULL, LAST_NAME) AS CUSTOMER_NAME FROM CUSTOMER; #구분 인수 뒤에 오는 NULL은 무시하여 건너 뛴다. 합치려는 열에 NULL이 있을 경우 NULL을 제외 후 출력한다

#데이터 형 변환 함수 - CAST, CONVERT
*CAST 및 CONVERT에 사용 가능한 데이터 유형 : BINARY, CHAR, DATE, DATETIME, TIME, DECIMAL, JSON, NCHAR, SIGNED, UNSIGNED
SELECT CAST(NOW() AS SIGNED) #날짜형을 숫자형으로 변환
SELECT CAST(20230819 AS DATE) #숫자형을 날짜형으로 변환
SELECT CAST(20230819 AS CHAR) #숫자형을 문자열로 변환

SELECT CONVERT(NOW(), SIGNED) #날짜형을 정수형으로 변환
SELECT CONVERT(20230819, DATE) #숫자형을 날짜형으로 변환
SELECT CONVERT(20230819, CHAR(5)) #데이터 길이 지정

SELECT CAST(9223372036854775807 AS UNSIGNED) + 1 #오버플로 방지, *오버플로: 데이터 유형에 따른 한계값을 넘은 것
SELECT CONVERT(9223372036854775807 AS UNSIGNED) + 1 #CAST뿐만 아니라 CONVERT도 마찬가지

#NULL을 대체하는 함수 - IFNULL, COALESCE
SELECT COL_1, IFNULL(COL_2, '') AS COL_2, COL_3, COL_4, COL_5 #IFNULL함수로 COL_2열의 NULL을 대체
FROM DOIT_NULL WHERE COL_1 = 1;
SELECT COL_1, IFNULL(COL_2, COL_3) AS COL_2, COL_3, COL_4, COL_5 #IFNULL함수로 COL_3열의 NULL을 대체
FROM DOIT_NULL WHERE COL_1 = 1;

SELECT COL_1, COALESCE(COL_2, COL_3, COL_4, COL_5) #COALESCE함수는 차례대로 NULL이 없는 데이터로 대체함. 마지막 인자에도 NULL이 있는 경우는 결국 NULL을 반환
FROM DOIT_NULL WHERE COL_1 = 2;

#소문자 혹은 대문자로 변경하는 함수 - LOWER, UPPER
SELECT 'Do it! SQL', LOWER('Do it! SQL'), UPPER('Do it! SQL');

#공백을 제거하는 함수 - LTRIM, RTRIM, TRIM
LTRIM 함수로 왼쪽 공백 제거
RTRIM 함수로 오른쪽 공백 제거
TRIM 함수로 양쪽 공백 제거
SELECT TRIM(BOTH '#' FROM '#    Do it! MySQL    #); #TRIM 함수수로 양쪽 문자 제거

#문자열 크기 또는 개수를 반환하는 함수 - LENGTH, CHAR_LENGTH
SELECT LENGTH('Do it! MySQL'), LENGTH('두잇 마이에스큐엘'):
CHAR_LENGTH('Do it! MySQL'), CHAR_LENGTH('두잇 마이에스큐엘');

#특정 문자까지의 문자열 길이를 반환하는 함수 - POSITTION
SELECT 'Do it!! SQL', POSITION('!' IN 'Do it!! MySQL'); # !까지해서 문자열 길이를 구하기
SELECT 'Do it!! SQL', POSITION('#' IN 'Do it!! MySQL'); #탐색 문자가 없는 경우 0을 반환

#지정한 범위의 문자열을 반환하는 함수 - SUBSTRING
SELECT 'Do it MySQL', SUBSTRING('Do it! MySQL', 4, 2);
SELECT FIRST_NAME, SBUSTRING(FIRST_NAE, 2, 3) FROM CUSTOMER; #열 이름 전달
SELECT SUBSTRING('abc@email.com', 1, POSIITION('@' IN 'abc@email.com') - 1); #SUBSTRING과 POSITOIN 함수 조합

#특정 문자를 다른 문자로 대체하는 함수 - REPLACE
SELECT FIRST_NAME, REPLACE(FIRST_NAME, 'A', 'C')
FROM CUSTOMER WHERE FIRST_NAME LIKE 'A%';

#문자를 반복하는 함수 - REPEAT
SELECT REPEAT ('0', 10) #숫자 0을 10번 반복

#공백 문자를 생성하는 함수 - SPACE
SELECT CONCAT(FIRST_NAME, SPACE(10), LAST_NAME) FROM CUSTOMER;

#문자열을 역순으로 출력하는 함수 - REVERSE
SELECT 'Do it! MySQL', REVERSE('Do it! MySQL');

#문자열을 비교하는 함수 - STRCMP
SELECT STRCMP('Do it! MySQL', 'Do it! MySQL'); #비교하는 두 문자열이 동일한 경우 0을, 다를 경우 -1로 반환한다


#[날짜 함수]
#서버의 현재 날짜나 시간을 반환하는 다양한 함수
SELECT CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP(), NOW();
SELECT CURRENT_DATE(), CURRENT_TIME(3), CURRENT_TIMESTAMP(3), NOW(3); #3부터 6까지 추가하여 시간을 좀 더 정밀히 확인가능
SELECT CURRENT_TIMESTAMP(3), UTC_DATE(), UTC_TIME(3), UTC_TIMESTAMP(3); #세계 표준 날짜나 시간 반환

#날짜를 더하거나 빼는 함수 - DATE_ADD, DATE_SUB
SELECT NOW(), DATE_ADD(NOW(), INTERVAL 1 YEAR); #DATE_ADD 함수로 1년 증가한 날짜 반환
SELECT NOW(), DATE_ADD(NOW(), INTERVAL -1 YEAR); #1년 감소한 날짜 반환
SELECT NOW(), DAT_SUB(NOW(), INTERVAL 1 YEAR), DATE_SUB(NOW(), INTERVAL -1 YEAR); #DATE SUB은 DATEA_ADD와 반대

#날짜 간 차이를 구하는 함수 - DATEDIFF, TIMESTAMPDIFF
SELECT DATEDIFF('2023-12-31 23:59:59.9999999', '2023-01-01 00:00:00.0000000'); #DATEDIFF ㅎ마수로 날짜 간의 일수 차 반환
SELECT TIMESTAMPDIFF(MONTH, '2023-12-31 23:59:59.9999999', '2023-01-01 00:00:00.0000000'); #TIMESTAMPDIFF 함수로 날짜 간의 개월 수 차 반환

#지정한 날짜의 요일을 반환하는 함수 - DAYNAME
SELECT DAYNAME('2023-08-20'); #DAYNAME ㅎ마수로 특정 날짜의 요일 반환

#날짜에서 연,월,주,일을 값으로 가져오는 함수 - YEAR, MONTH, WEEK, DAY
SELECT 
  YEAR('2023-08-20'),
  MONTH('2023-08-20'),
  WEEK('2023-08-20'),
  DAY('2023-08-20');

#날짜 형식을 반환하는 함수 - DATE_FORMAT, GET_FORMAT
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%m/%d/%Y); 
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%Y%m%d')#연,월,일
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%Y.%m.%d'): #날짜 구분자를 변경해 출력
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%H:%i:%s'); #시,분,초

#GET_FORMAT 함수로 국가나 지역별 날짜 형식 확인

#조건에 맞는 데이터 개수를 세는 함수 - COUNT
SELECT COUNT(*) FROM CUSTOMER;
SELECT STORE_ID, COUNT(*) AS CNT FROM CUSTOMER GROUP BY STORE_ID;
SELECT STORE_ID, ACTIVE, COUNT(*) AS CNT FROM CUSTOMER GROUP BY STORE_ID, ACTIVE;
SELECT COUNT(*) AS ALL_CNT, COUNT(ADDRESS2) AS EX_NULL FROM ADDRESS; #ADDRESS2 열의 NULL은 COUNT 함수의 집계 대상이 아니므로 NULL을 제외 후 개수를 집계
SELECT COUNT(*), COUNT(STORE_ID), COUNT(DISTINCT STORE_ID) FROM CUSTOMER; #DISTINCT문을 조합하면 중복된 값을 제외후 개수를 집계

#데이터의 합을 구하는 함수 - SUM
SELECT SUM(AMOUNT) FROM PAYMENT; 
SELECT CUSTOMER_ID, SUM(AMOUT) FROM PAYMENT GROUP BY CUSTOMER_ID;

#데이터의 평균을 구하는 함수 - AVG
SELECT AVG(AMOUNT) FROM PAYMENT;
SELECT CUSTOMER_ID, AVG(AMOUNT) FROM PAYMENT GROUP BY CUSTOEMR_ID;

#최소값 또는 최대값을 구하는 함수 - MIN, MAX
SELECT MIN(AMOUNT), MAX(AMOUNT) FROM PAYMENT
SELECT CUSTOEMR_ID, MIN(AMOUNT), MAX(AMOUNT) FROM PAYMENT GROUP BY CUSTOMER_ID;

#부분합과 총합을 구하는 함수 - ROLLUP
SELECT CUSTOMER_ID, STAFF_ID, SUM(AMOUNT)
FROM PAYMENT
GROUP BY CUSTOMER_ID, STAFF_ID WITH ROLLUP;

#데이터의 표준편차를 구하는 함수 - STDDEV, STDDEV_SAMP
SELECT STDDEV(AMOUNT), STDDEV_SAMP(AMOUNT) FROM PAYMENT; #모든 값에 대한 표준편차, 표본에 대한 표준편차
