#[날짜 함수]
#서버의 현재 날짜나 시간을 반환하는 다양한 함수
SELECT CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP(), NOW();
SELECT CURRENT_DATE(), CURRENT_TIME(3), CURRENT_TIMESTAMP(3), NOW(3); #3부터 6까지 추가하여 시간을 좀 더 정밀히 확인가능
SELECT CURRENT_TIMESTAMP(3), UTC_DATE(), UTC_TIME(3), UTC_TIMESTAMP(3); #세계 표준 날짜나 시간 반환

#날짜를 더하거나 빼는 함수 - DATE_ADD, DATE_SUB
SELECT NOW(), DATE_ADD(NOW(), INTERVAL 1 YEAR); #DATE_ADD 함수로 1년 증가한 날짜 반환
SELECT NOW(), DATE_ADD(NOW(), INTERVAL -1 YEAR); #1년 감소한 날짜 반환
SELECT NOW(), DAT_SUB(NOW(), INTERVAL 1 YEAR), DATE_SUB(NOW(), INTERVAL -1 YEAR); #DATE SUB은 DATEA_ADD와 반대

#날짜 간 차이를 구하는 함수 - DATEDIFF, TIMESTAMPDIFF
SELECT DATEDIFF('2023-12-31 23:59:59.9999999', '2023-01-01 00:00:00.0000000'); #DATEDIFF ㅎ마수로 날짜 간의 일수 차 반환
SELECT TIMESTAMPDIFF(MONTH, '2023-12-31 23:59:59.9999999', '2023-01-01 00:00:00.0000000'); #TIMESTAMPDIFF 함수로 날짜 간의 개월 수 차 반환

#지정한 날짜의 요일을 반환하는 함수 - DAYNAME
SELECT DAYNAME('2023-08-20'); #DAYNAME ㅎ마수로 특정 날짜의 요일 반환

#날짜에서 연,월,주,일을 값으로 가져오는 함수 - YEAR, MONTH, WEEK, DAY
SELECT 
  YEAR('2023-08-20'),
  MONTH('2023-08-20'),
  WEEK('2023-08-20'),
  DAY('2023-08-20');

#날짜 형식을 반환하는 함수 - DATE_FORMAT, GET_FORMAT
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%m/%d/%Y); 
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%Y%m%d')#연,월,일
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%Y.%m.%d'): #날짜 구분자를 변경해 출력
SELECT DATE_FORMAT('2023-08-20 20:23:01', '%H:%i:%s'); #시,분,초

#GET_FORMAT 함수로 국가나 지역별 날짜 형식 확인

#조건에 맞는 데이터 개수를 세는 함수 - COUNT
SELECT COUNT(*) FROM CUSTOMER;
SELECT STORE_ID, COUNT(*) AS CNT FROM CUSTOMER GROUP BY STORE_ID;
SELECT STORE_ID, ACTIVE, COUNT(*) AS CNT FROM CUSTOMER GROUP BY STORE_ID, ACTIVE;
SELECT COUNT(*) AS ALL_CNT, COUNT(ADDRESS2) AS EX_NULL FROM ADDRESS; #ADDRESS2 열의 NULL은 COUNT 함수의 집계 대상이 아니므로 NULL을 제외 후 개수를 집계
SELECT COUNT(*), COUNT(STORE_ID), COUNT(DISTINCT STORE_ID) FROM CUSTOMER; #DISTINCT문을 조합하면 중복된 값을 제외후 개수를 집계

#데이터의 합을 구하는 함수 - SUM
SELECT SUM(AMOUNT) FROM PAYMENT; 
SELECT CUSTOMER_ID, SUM(AMOUT) FROM PAYMENT GROUP BY CUSTOMER_ID;

#데이터의 평균을 구하는 함수 - AVG
SELECT AVG(AMOUNT) FROM PAYMENT;
SELECT CUSTOMER_ID, AVG(AMOUNT) FROM PAYMENT GROUP BY CUSTOEMR_ID;

#최소값 또는 최대값을 구하는 함수 - MIN, MAX
SELECT MIN(AMOUNT), MAX(AMOUNT) FROM PAYMENT
SELECT CUSTOEMR_ID, MIN(AMOUNT), MAX(AMOUNT) FROM PAYMENT GROUP BY CUSTOMER_ID;

#부분합과 총합을 구하는 함수 - ROLLUP
SELECT CUSTOMER_ID, STAFF_ID, SUM(AMOUNT)
FROM PAYMENT
GROUP BY CUSTOMER_ID, STAFF_ID WITH ROLLUP;

#데이터의 표준편차를 구하는 함수 - STDDEV, STDDEV_SAMP
SELECT STDDEV(AMOUNT), STDDEV_SAMP(AMOUNT) FROM PAYMENT; #모든 값에 대한 표준편차, 표본에 대한 표준편차
